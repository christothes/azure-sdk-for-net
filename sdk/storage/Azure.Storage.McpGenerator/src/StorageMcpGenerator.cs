﻿// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.Text;

namespace Azure.Storage.McpGenerator;

[Generator]
internal class StorageMcpGenerator : ISourceGenerator
{
    public void Initialize(GeneratorInitializationContext context)
    {
        // Uncomment to debug
        // if (!Debugger.IsAttached)
        // {
        //     Debugger.Launch();
        // }
    }

    public void Execute(GeneratorExecutionContext context)
    {
        // Call context.Compilation.GetSymbolsWithName to get the public classes in the namespace Azure.Storage.Blobs

        var clientClasses = context.Compilation.GetSymbolsWithName(
            name => name.EndsWith("Client"),
            SymbolFilter.Type);

        // Generate a new source file containing a class with the same name as the public class but with the suffix ".Mcp"
        foreach (var publicClass in clientClasses)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("// <auto-generated/>");
            sb.AppendLine();
            sb.AppendLine("namespace Azure.Storage.McpGenerator;");
            sb.AppendLine();
            sb.AppendLine("using Azure.Storage;");
            sb.AppendLine();
            sb.AppendLine($$"""
            //{{publicClass.ToDisplayString()}}
            """);

            // find the first constructor that takes a TokenCredential as a parameter
            var constructor = ((INamedTypeSymbol)publicClass).GetMembers()
            .OfType<IMethodSymbol>()
            .FirstOrDefault(m => m.MethodKind == MethodKind.Constructor &&
                       m.Parameters.Any(p => p.Type.ToDisplayString() == "Azure.Core.TokenCredential"));

            // add a line of code that calls the constructor with default parameter values
            if (constructor != null)
            {
                var parameters = string.Join(", ", constructor.Parameters.Where(p => !p.IsOptional).Select(p =>
                {
                    return p.Type switch
                    {
                        INamedTypeSymbol namedType when namedType.ToDisplayString() == "System.Uri" => $"new Uri(uri)",
                        INamedTypeSymbol namedType when namedType.ToDisplayString() == "Azure.Core.TokenCredential" => "new DefaultAzureCredential()",
                        _ => $"new {p.Type.ToDisplayString()}()"
                    };
                }));
                string clientCtor = $$"""var client = new {{publicClass.ToDisplayString()}}({{parameters}});""";

                // Get the Description attribute from the constructor
                var descriptionAttribute = constructor.GetAttributes()
                    .FirstOrDefault(a => a.AttributeClass?.ToDisplayString() == "System.ComponentModel.DescriptionAttribute");
                if (descriptionAttribute != null)
                {
                    // Get the description value from the attribute
                    var descriptionValue = descriptionAttribute.ConstructorArguments[0].Value?.ToString();

                    List<string> parametersList = new List<string>();
                    // create a regex to find all the parameters in curly braces
                    var regex = new System.Text.RegularExpressions.Regex(@"\{(.*?)\}");
                    var matches = regex.Matches(descriptionValue);
                    foreach (System.Text.RegularExpressions.Match match in matches)
                    {
                        // add the parameter name to the list
                        parametersList.Add(match.Groups[1].Value);
                    }
                    // create a method called GetBlobUri that takes a string parammeter represening each value in curly braces
                    // and returns a Uri with the value of the string literal replaced with the values of the parameters
                    sb.AppendLine($$"""
                    public Uri GetBlobUri({{string.Join(", ", parametersList.Select(p => $"string {p}"))}})
                    {
                        // replace the values in the string literal with the values of the parameters
                        return $"{{descriptionValue}}";
                    }

                    """);
                }

                // Find IMethodSymbol for each method in the class that has a [Description] attribute and create a wrapper method for it
                var methods = ((INamedTypeSymbol)publicClass).GetMembers()
                    .OfType<IMethodSymbol>()
                    .Where(m => m.MethodKind != MethodKind.Constructor)
                    .Where(m => m.GetAttributes().Any(a => a.AttributeClass?.ToDisplayString() == "System.ComponentModel.DescriptionAttribute"));

                foreach (var method in methods)
                {
                    // add code to the string builder for each method
                    sb.AppendLine($$"""
                    public void {{method.Name}}(Uri storageBlobUri, {{string.Join(", ", method.Parameters.Select(p => $"{p.Type.ToDisplayString()} {p.Name}"))}})
                    {
                        //Call the original method with the storageBlobUri parameter
                        {{clientCtor}}
                        client.{{method.Name}}({{string.Join(", ", method.Parameters.Select(p => p.Name))}});
                    }

                    """);
                }
            }
            // Create a new source file with the generated code
            var sourceText = SourceText.From(sb.ToString(), Encoding.UTF8);
            context.AddSource($"{publicClass.Name}.Mcp.g.cs", sourceText);
        }
    }
}
